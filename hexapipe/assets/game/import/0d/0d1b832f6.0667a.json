[1,["c8WhlSpRNM2rQKsoMYsZLp"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,3],[1,0,1,2,4]],[[[[0,"RawPipe",{"0":{"props":{}}}]],0,0,[0],[0],[0]],[[[1,"RawPipe",[{"hash":1083283878,"record":null,"name":"RawPipe|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin float a_progress;\nout float v_progress;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nin vec2 a_p;\nout vec2 v_p;\nin vec2 a_q;\nout vec2 v_q;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_progress = a_progress;\n  v_color = a_color;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives: enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin float v_progress;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nin vec2 v_p;\nin vec2 v_q;\nuniform UARGS {\n  float u_progress;\n};\nfloat sdHexagon(in vec2 p, in float r)\n{\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\nconst vec3 grey = vec3(0.5, 0.5, 0.5);\nconst float xyRatio = 394./348.;\nconst float hexRatio = 336./348.;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec2 uv01 = uv * v_p + v_q;\n  uv01 = uv01 * 2. - 1.;\n  uv01.x *= xyRatio;\n  vec4 col = texture2D(texture, v_uv0.xy);\n  float g = min(col.a * 256., 1.);\n  float alpha = col.a;\n  float flowMask = smoothstep(0., 0.2, v_progress - u_progress);\n  vec4 flowColor;\n  flowColor.rgb = mix(v_color.rgb, grey, flowMask);\n  flowColor.a = alpha;\n  flowColor.rgb = mix(vec3(1.0), flowColor.rgb, abs(flowMask-0.5) * 2.);\n  float hexMask = sdHexagon(uv01, hexRatio);\n  #if CC_SUPPORT_standard_derivatives\n    float aa = fwidth(hexMask);\n  #else\n    const float aa = 2./394.;\n  #endif\n  hexMask = smoothstep(0.0, -aa, hexMask);\n  vec4 bg = vec4(hexMask);\n  gl_FragColor = bg * (1.-alpha) + flowColor;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute float a_progress;\nvarying float v_progress;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nattribute vec2 a_p;\nvarying vec2 v_p;\nattribute vec2 a_q;\nvarying vec2 v_q;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_progress = a_progress;\n  v_color = a_color;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives: enable\n#endif\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying float v_progress;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvarying vec2 v_p;\nvarying vec2 v_q;\nuniform float u_progress;\nfloat sdHexagon(in vec2 p, in float r)\n{\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\nconst vec3 grey = vec3(0.5, 0.5, 0.5);\nconst float xyRatio = 394./348.;\nconst float hexRatio = 336./348.;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec2 uv01 = uv * v_p + v_q;\n  uv01 = uv01 * 2. - 1.;\n  uv01.x *= xyRatio;\n  vec4 col = texture2D(texture, v_uv0.xy);\n  float g = min(col.a * 256., 1.);\n  float alpha = col.a;\n  float flowMask = smoothstep(0., 0.2, v_progress - u_progress);\n  vec4 flowColor;\n  flowColor.rgb = mix(v_color.rgb, grey, flowMask);\n  flowColor.a = alpha;\n  flowColor.rgb = mix(vec3(1.0), flowColor.rgb, abs(flowMask-0.5) * 2.);\n  float hexMask = sdHexagon(uv01, hexRatio);\n  #if CC_SUPPORT_standard_derivatives\n    float aa = fwidth(hexMask);\n  #else\n    const float aa = 2./394.;\n  #endif\n  hexMask = smoothstep(0.0, -aa, hexMask);\n  vec4 bg = vec4(hexMask);\n  gl_FragColor = bg * (1.-alpha) + flowColor;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"CC_SUPPORT_standard_derivatives","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"UARGS","binding":1,"members":[{"name":"u_progress","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"RawPipe|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]