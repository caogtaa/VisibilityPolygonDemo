[1,["3eJwwGRqJELbDZRxIxdAgp"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,3]],[[[[0,"SDFPipe",[{"hash":2626548898,"record":null,"name":"SDFPipe|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin float a_progress;\nout float v_progress;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nin vec2 a_p;\nout vec2 v_p;\nin vec2 a_q;\nout vec2 v_q;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_progress = a_progress;\n  v_color = a_color;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives: enable\n#endif\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).rg;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).rg;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).rg;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).rg;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin float v_progress;\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nin vec2 v_p;\nin vec2 v_q;\nuniform UARGS {\n  vec4 bgEdgeGrey;\n  vec4 bgWhite;\n  vec4 grey;\n  float u_progress;\n  float haloTime;\n};\nfloat sdHexagon(in vec2 p, in float r)\n{\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\nconst float xyRatio = 104./88.;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec2 uv01 = uv * v_p + v_q;\n  uv01 = uv01 * 2. - 1.;\n  uv01.x *= xyRatio;\n  float D = GetD(texture, uv);\n  float sdHex = -sdHexagon(uv01, 0.85);\n  float flowMask = smoothstep(0., 0.2, v_progress - u_progress);\n  float flowHead = abs(flowMask-0.5) * 2.;\n  #if CC_SUPPORT_standard_derivatives\n    float hexAA = fwidth(sdHex);\n    float pipeAA = fwidth(D);\n  #else\n    float hexAA = 2./texSize.x;\n    float pipeAA = 2./texSize.x;\n  #endif\n  const vec3 hexDist = vec3(0., 5./88., 10./88.);\n  vec3 sd = vec3(sdHex + 0.15) - hexDist;\n  vec3 hexMask = smoothstep(-hexAA, 0., sd);\n  float t = haloTime;\n  float haloAlpha = 1.0 - haloTime;\n  t = t * (2.-t);\n  vec4 haloColor = vec4(v_color.rgb, hexMask.x);\n  float haloWidth = 6. - (t * 6.);\n  float haloPos = t * 16. - haloWidth;\n  float D_width = D + 1. -flowMask * 2.;\n  vec3 pipeMask = smoothstep(-pipeAA, 0., vec3(D_width+2., D_width, haloWidth - abs(D+haloPos)));\n  float haloMask = pipeMask.z * (1.-flowMask) * haloAlpha;\n  vec3 edgeColor = vec3(0.98);\n  vec4 bg;\n  bg.rgb = bgWhite.rgb;\n  bg.rgb = mix(edgeColor, bg.rgb, hexMask.z);\n  bg.a = hexMask.y;\n  vec4 flowColor;\n  flowColor.rgb = mix(v_color.rgb, grey.rgb, flowMask);\n  flowColor.a = pipeMask.x * mix(hexMask.x, hexMask.y, flowMask);\n  flowColor.rgb = mix(vec3(1.0), flowColor.rgb, flowHead);\n  flowColor.rgb *= max(0.6, pipeMask.y);\n  float mixMask = mix(pipeMask.x, flowColor.a, flowMask);\n  vec4 finalColor = mix(bg, flowColor, mixMask);\n  finalColor = mix(finalColor, haloColor, haloMask);\n  gl_FragColor = finalColor;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute float a_progress;\nvarying float v_progress;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nattribute vec2 a_p;\nvarying vec2 v_p;\nattribute vec2 a_q;\nvarying vec2 v_q;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_progress = a_progress;\n  v_color = a_color;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}","frag":"\n#if CC_SUPPORT_standard_derivatives\n  #extension GL_OES_standard_derivatives: enable\n#endif\nprecision highp float;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).rg;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).rg;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).rg;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).rg;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying float v_progress;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvarying vec2 v_p;\nvarying vec2 v_q;\nuniform vec4 bgWhite;\nuniform vec4 grey;\nuniform float u_progress;\nuniform float haloTime;\nfloat sdHexagon(in vec2 p, in float r)\n{\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\nconst float xyRatio = 104./88.;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec2 uv01 = uv * v_p + v_q;\n  uv01 = uv01 * 2. - 1.;\n  uv01.x *= xyRatio;\n  float D = GetD(texture, uv);\n  float sdHex = -sdHexagon(uv01, 0.85);\n  float flowMask = smoothstep(0., 0.2, v_progress - u_progress);\n  float flowHead = abs(flowMask-0.5) * 2.;\n  #if CC_SUPPORT_standard_derivatives\n    float hexAA = fwidth(sdHex);\n    float pipeAA = fwidth(D);\n  #else\n    float hexAA = 2./texSize.x;\n    float pipeAA = 2./texSize.x;\n  #endif\n  const vec3 hexDist = vec3(0., 5./88., 10./88.);\n  vec3 sd = vec3(sdHex + 0.15) - hexDist;\n  vec3 hexMask = smoothstep(-hexAA, 0., sd);\n  float t = haloTime;\n  float haloAlpha = 1.0 - haloTime;\n  t = t * (2.-t);\n  vec4 haloColor = vec4(v_color.rgb, hexMask.x);\n  float haloWidth = 6. - (t * 6.);\n  float haloPos = t * 16. - haloWidth;\n  float D_width = D + 1. -flowMask * 2.;\n  vec3 pipeMask = smoothstep(-pipeAA, 0., vec3(D_width+2., D_width, haloWidth - abs(D+haloPos)));\n  float haloMask = pipeMask.z * (1.-flowMask) * haloAlpha;\n  vec3 edgeColor = vec3(0.98);\n  vec4 bg;\n  bg.rgb = bgWhite.rgb;\n  bg.rgb = mix(edgeColor, bg.rgb, hexMask.z);\n  bg.a = hexMask.y;\n  vec4 flowColor;\n  flowColor.rgb = mix(v_color.rgb, grey.rgb, flowMask);\n  flowColor.a = pipeMask.x * mix(hexMask.x, hexMask.y, flowMask);\n  flowColor.rgb = mix(vec3(1.0), flowColor.rgb, flowHead);\n  flowColor.rgb *= max(0.6, pipeMask.y);\n  float mixMask = mix(pipeMask.x, flowColor.a, flowMask);\n  vec4 finalColor = mix(bg, flowColor, mixMask);\n  finalColor = mix(finalColor, haloColor, haloMask);\n  gl_FragColor = finalColor;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"CC_SUPPORT_standard_derivatives","type":"boolean","defines":[]},{"name":"SDF_HI_RES","type":"boolean","defines":[]},{"name":"SDF_DUAL_CHANNEL","type":"boolean","defines":["SDF_HI_RES"]}],"blocks":[{"name":"SDFARGS","binding":0,"members":[{"name":"texSize","type":16,"count":1},{"name":"maxDist","type":14,"count":1}],"defines":[]},{"name":"UARGS","binding":1,"members":[{"name":"bgEdgeGrey","type":16,"count":1},{"name":"bgWhite","type":16,"count":1},{"name":"grey","type":16,"count":1},{"name":"u_progress","type":13,"count":1},{"name":"haloTime","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"SDFPipe|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"haloTime":{"type":13,"value":[-1]}}}]}]]],0,0,[],[],[]],[[[1,"SDFPipe",{"0":{"props":{},"defines":{"SDF_HI_RES":true,"SDF_DUAL_CHANNEL":true,"USE_TEXTURE":false}}}]],0,0,[0],[0],[0]]]]