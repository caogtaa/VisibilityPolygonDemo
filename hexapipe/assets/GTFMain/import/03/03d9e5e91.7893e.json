[1,["a1dc/12fRKRZFFy7muyhpZ"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,3]],[[[[0,"Grayscale",[{"hash":2520307951,"record":null,"name":"Grayscale|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_p;\nin vec2 a_q;\nout vec4 v_color;\nout vec2 v_p;\nout vec2 v_q;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_p;\nin vec2 v_q;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat Circle(vec2 uv, vec2 o, float square_r) {\n  uv -= o;\n  return 1.0 - step(square_r, dot(uv, uv));\n}\nconst vec2 o1 = vec2(0.1, 0.1);\nconst vec2 o2 = vec2(0.860,0.570);\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv);\n  uv = uv * v_p + v_q;\n  float gray = dot(col.rgb, vec3(0.299, 0.587, 0.114));\n  float radius = v_color.r;\n  float mask = Circle(uv, o1, radius);\n  mask += Circle(uv, o2, radius);\n  col.rgb = mix(vec3(gray), col.rgb, clamp(mask, 0., 1.));\n  gl_FragColor = col;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_p;\nattribute vec2 a_q;\nvarying vec4 v_color;\nvarying vec2 v_p;\nvarying vec2 v_q;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_p;\nvarying vec2 v_q;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat Circle(vec2 uv, vec2 o, float square_r) {\n  uv -= o;\n  return 1.0 - step(square_r, dot(uv, uv));\n}\nconst vec2 o1 = vec2(0.1, 0.1);\nconst vec2 o2 = vec2(0.860,0.570);\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv);\n  uv = uv * v_p + v_q;\n  float gray = dot(col.rgb, vec3(0.299, 0.587, 0.114));\n  float radius = v_color.r;\n  float mask = Circle(uv, o1, radius);\n  mask += Circle(uv, o2, radius);\n  col.rgb = mix(vec3(gray), col.rgb, clamp(mask, 0., 1.));\n  gl_FragColor = col;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Grayscale|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[1,"Grayscale",{"0":{"props":{}}}]],0,0,[0],[0],[0]]]]